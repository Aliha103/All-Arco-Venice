Updated Advanced Booking Schema (Backend PostgreSQL):
sql
Copy
Edit
CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,
    guest_first_name VARCHAR(100) NOT NULL,
    guest_last_name VARCHAR(100) NOT NULL,
    guest_country VARCHAR(100),
    guest_mobile VARCHAR(20),

    check_in_date DATE NOT NULL,
    check_out_date DATE NOT NULL,
    check_in_time TIME DEFAULT '15:00',
    check_out_time TIME DEFAULT '10:00',

    confirmation_number VARCHAR(20) UNIQUE NOT NULL,
    
    status VARCHAR(20) CHECK (status IN ('confirmed', 'checked_in', 'checked_out', 'cancelled')) DEFAULT 'confirmed',

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Trigger for auto-generating secure confirmation number:
CREATE OR REPLACE FUNCTION generate_confirmation_number()
RETURNS TRIGGER AS $$
BEGIN
    NEW.confirmation_number := 'BK' || TO_CHAR(NOW(), 'YYMMDD') || LPAD(FLOOR(RANDOM() * 999999)::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_confirmation_number BEFORE INSERT ON bookings
FOR EACH ROW EXECUTE PROCEDURE generate_confirmation_number();
Explanation of Security & Advanced Details:
Guest Details:

guest_first_name and guest_last_name for clear identification.

guest_country and guest_mobile for complete, secure contact and verification.

Secure & Unique Confirmation Number:

Format: BKYYMMDDXXXXXX, e.g., BK250625328754 (Booking + date + random digits)

Auto-generated through a database trigger, ensuring no human intervention or duplication.

Robust Availability Validation (Advanced Logic):
To securely validate reservations and avoid conflicts:

typescript
Copy
Edit
// Advanced reservation validation logic (example with JS/TS):

async function isReservationAvailable(checkIn: Date, checkOut: Date): Promise<boolean> {
  const conflictQuery = `
    SELECT COUNT(*) FROM bookings
    WHERE status IN ('confirmed', 'checked_in')
      AND NOT (check_out_date <= $1 OR check_in_date >= $2)
  `;
  const conflicts = await db.query(conflictQuery, [checkIn, checkOut]);
  return conflicts.rows[0].count === "0";
}
Front-end Secure Booking Handler (Example with React):
tsx
Copy
Edit
import { useState } from "react";
import { submitBooking } from "./api";

function BookingForm() {
  const [formData, setFormData] = useState({
    guest_first_name: '',
    guest_last_name: '',
    guest_country: '',
    guest_mobile: '',
    check_in_date: '',
    check_out_date: ''
  });

  const handleBooking = async () => {
    const response = await submitBooking(formData);
    if (response.success) {
      alert(`Booking confirmed! Your confirmation number: ${response.confirmation_number}`);
    } else {
      alert('Selected dates are not available.');
    }
  };

  return (
    <form>
      <input placeholder="First Name" onChange={(e) => setFormData({...formData, guest_first_name: e.target.value})} />
      <input placeholder="Last Name" onChange={(e) => setFormData({...formData, guest_last_name: e.target.value})} />
      <input placeholder="Country" onChange={(e) => setFormData({...formData, guest_country: e.target.value})} />
      <input placeholder="Mobile Number" onChange={(e) => setFormData({...formData, guest_mobile: e.target.value})} />
      <input type="date" onChange={(e) => setFormData({...formData, check_in_date: e.target.value})} />
      <input type="date" onChange={(e) => setFormData({...formData, check_out_date: e.target.value})} />
      <button type="button" onClick={handleBooking}>Confirm Booking</button>
    </form>
  );
}
Enhanced Security Measures and Advanced Features Covered:
Detailed guest information collection.

Secure, unique booking confirmation numbers generated automatically.

Advanced validation preventing double bookings.

Frontend logic confirming reservations securely, providing instant feedback.

This schema and logic collectively ensure robust, secure, and advanced handling of reservations, fully optimized for reliability and operational efficiency.







You said:
there are three payment options
for guest side only 2 options (pay online and pay at property with card authorization by stripe)
for admin only enter card manually or select pay at property or this guest does not have to pay (has to pay only city tax)


ChatGPT said:
Here's an enhanced, secure, and comprehensive schema reflecting the three distinct payment methods with detailed differentiation for admin and guest access:

Advanced Booking Schema with Payment Options (PostgreSQL):
sql
Copy
Edit
CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,

    -- Guest identification details
    guest_first_name VARCHAR(100) NOT NULL,
    guest_last_name VARCHAR(100) NOT NULL,
    guest_country VARCHAR(100),
    guest_mobile VARCHAR(20),

    -- Booking details
    check_in_date DATE NOT NULL,
    check_out_date DATE NOT NULL,
    check_in_time TIME DEFAULT '15:00',
    check_out_time TIME DEFAULT '10:00',

    confirmation_number VARCHAR(20) UNIQUE NOT NULL,

    -- Payment Details
    payment_method VARCHAR(30) CHECK (
        payment_method IN ('online', 'at_property_card_auth', 'admin_manual_card', 'admin_pay_at_property', 'admin_city_tax_only')
    ) NOT NULL,
    payment_status VARCHAR(20) CHECK (
        payment_status IN ('pending', 'paid', 'authorized', 'not_required')
    ) DEFAULT 'pending',

    -- Financial Details
    total_price DECIMAL(10,2) NOT NULL,
    city_tax DECIMAL(10,2) DEFAULT 0.00,
    amount_paid DECIMAL(10,2) DEFAULT 0.00,

    -- Status management
    status VARCHAR(20) CHECK (status IN ('confirmed', 'checked_in', 'checked_out', 'cancelled')) DEFAULT 'confirmed',

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Secure automatic confirmation number generation
CREATE OR REPLACE FUNCTION generate_confirmation_number()
RETURNS TRIGGER AS $$
BEGIN
    NEW.confirmation_number := 'BK' || TO_CHAR(NOW(), 'YYMMDD') || LPAD(FLOOR(RANDOM() * 999999)::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_confirmation_number BEFORE INSERT ON bookings
FOR EACH ROW EXECUTE PROCEDURE generate_confirmation_number();
Clear Explanation of Payment Methods:
Guest Side (Public):

online: Guest pays in advance via Stripe or other payment gateway.

at_property_card_auth: Guest's card is pre-authorized via Stripe, payment at arrival.

Admin Side (Internal):

admin_manual_card: Admin manually enters card details (e.g., via Stripe dashboard).

admin_pay_at_property: Guest pays at property upon arrival, no card auth needed.

admin_city_tax_only: Guest is exempt from room payment, only city tax payable at the property.

Advanced Booking Validation Logic (Backend example with TypeScript):
typescript
Copy
Edit
// Booking validation function including payment logic example
async function validateAndCreateBooking(data: BookingData, userRole: 'guest' | 'admin') {
  
  // Validate availability first
  const conflictQuery = `
    SELECT COUNT(*) FROM bookings
    WHERE status IN ('confirmed', 'checked_in')
      AND NOT (check_out_date <= $1 OR check_in_date >= $2)
  `;
  const conflicts = await db.query(conflictQuery, [data.check_in_date, data.check_out_date]);
  
  if (parseInt(conflicts.rows[0].count) > 0) {
    throw new Error('Selected dates unavailable.');
  }

  // Validate payment method based on user role
  if (userRole === 'guest' && !['online', 'at_property_card_auth'].includes(data.payment_method)) {
    throw new Error('Invalid payment method for guests.');
  }

  if (userRole === 'admin' && ![
    'admin_manual_card', 'admin_pay_at_property', 'admin_city_tax_only'
  ].includes(data.payment_method)) {
    throw new Error('Invalid payment method for admin.');
  }

  // Insert booking
  const insertQuery = `
    INSERT INTO bookings (
      guest_first_name, guest_last_name, guest_country, guest_mobile,
      check_in_date, check_out_date, payment_method, total_price, city_tax
    ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING confirmation_number
  `;
  
  const booking = await db.query(insertQuery, [
    data.guest_first_name, data.guest_last_name, data.guest_country, data.guest_mobile,
    data.check_in_date, data.check_out_date, data.payment_method,
    data.total_price, data.city_tax
  ]);

  return booking.rows[0].confirmation_number;
}
Frontend Booking Form (React TypeScript):
tsx
Copy
Edit
import { useState } from "react";
import { submitBooking } from "./api";

const BookingForm = ({ userRole }: { userRole: 'guest' | 'admin' }) => {
  const [formData, setFormData] = useState({
    guest_first_name: '',
    guest_last_name: '',
    guest_country: '',
    guest_mobile: '',
    check_in_date: '',
    check_out_date: '',
    payment_method: '',
    total_price: 0,
    city_tax: 0,
  });

  const guestPaymentOptions = [
    { value: 'online', label: 'Pay Online' },
    { value: 'at_property_card_auth', label: 'Pay at Property (Card Authorization)' }
  ];

  const adminPaymentOptions = [
    { value: 'admin_manual_card', label: 'Enter Card Manually' },
    { value: 'admin_pay_at_property', label: 'Pay at Property' },
    { value: 'admin_city_tax_only', label: 'City Tax Only' }
  ];

  const paymentOptions = userRole === 'guest' ? guestPaymentOptions : adminPaymentOptions;

  const handleBooking = async () => {
    try {
      const response = await submitBooking(formData, userRole);
      alert(`Booking confirmed! Your confirmation number: ${response.confirmation_number}`);
    } catch (error) {
      alert(`Booking failed: ${error.message}`);
    }
  };

  return (
    <form>
      <input placeholder="First Name" onChange={e => setFormData({...formData, guest_first_name: e.target.value})} />
      <input placeholder="Last Name" onChange={e => setFormData({...formData, guest_last_name: e.target.value})} />
      <input placeholder="Country" onChange={e => setFormData({...formData, guest_country: e.target.value})} />
      <input placeholder="Mobile Number" onChange={e => setFormData({...formData, guest_mobile: e.target.value})} />
      <input type="date" onChange={e => setFormData({...formData, check_in_date: e.target.value})} />
      <input type="date" onChange={e => setFormData({...formData, check_out_date: e.target.value})} />

      <select onChange={e => setFormData({...formData, payment_method: e.target.value})}>
        <option value="">Select Payment Method</option>
        {paymentOptions.map(option => (
          <option key={option.value} value={option.value}>{option.label}</option>
        ))}
      </select>

      <input type="number" placeholder="Total Price" onChange={e => setFormData({...formData, total_price: parseFloat(e.target.value)})} />
      <input type="number" placeholder="City Tax" onChange={e => setFormData({...formData, city_tax: parseFloat(e.target.value)})} />

      <button type="button" onClick={handleBooking}>Confirm Booking</button>
    </form>
  );
};