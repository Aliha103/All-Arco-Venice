import { useState, useEffect } from "react"
import {
  Star,
  MapPin,
  Users,
  PawPrint,
  Minus,
  Plus,
  CheckCircle,
  Lock,
  AlertCircle,
  Clock,
  LogIn,
  UserPlus,
  Shield,
  MessageCircle,
} from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  Calendar as AdvancedCalendar,
  validateStayRange,
  type DateRange,
} from "@/components/advanced-calendar"
import { format } from "date-fns"

/**
 * Landing page re‑wired to the hardened AdvancedCalendar.
 * No hand‑rolled calendar grids, no duplicate validation: one source of truth.
 */
export default function Landing() {
  /* ------------------------------------------------------------------ */
  //  Booking state
  /* ------------------------------------------------------------------ */
  const [checkIn, setCheckIn] = useState("")
  const [checkOut, setCheckOut] = useState("")
  const [guests, setGuests] = useState(2)
  const [hasPet, setHasPet] = useState(false)
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({})
  const [isCheckingAvailability, setIsCheckingAvailability] = useState(false)
  const [lastAvailabilityCheck, setLastAvailabilityCheck] = useState(0)

  /* ------------------------------------------------------------------ */
  //  Mock bookings → arrival dates only (check‑out allowed)
  /* ------------------------------------------------------------------ */
  const existingBookings = [
    { checkIn: "2025-06-15" },
    { checkIn: "2025-06-22" },
    { checkIn: "2025-07-01" },
    { checkIn: "2025-07-10" },
    { checkIn: "2025-07-20" },
  ]
  const bookedCheckInDates = existingBookings.map((b) => new Date(b.checkIn))

  /* ------------------------------------------------------------------ */
  //  Calendar → form wiring
  /* ------------------------------------------------------------------ */
  const handleValidRangeSelect = (range: DateRange) => {
    if (range.from) setCheckIn(format(range.from, "yyyy-MM-dd"))
    if (range.to) setCheckOut(format(range.to, "yyyy-MM-dd"))
  }

  /* ------------------------------------------------------------------ */
  //  Real‑time availability + client‑side limits (≤30 nights)
  /* ------------------------------------------------------------------ */
  const RATE_LIMIT_MS = 2000
  const validateBooking = () => {
    if (!checkIn || !checkOut) return { valid: false, reason: "Select dates" }
    return validateStayRange(
      { from: new Date(checkIn), to: new Date(checkOut) },
      bookedCheckInDates,
      { maxStayDays: 30 }
    )
  }

  useEffect(() => {
    const verdict = validateBooking()
    setValidationErrors(verdict.valid ? {} : { checkOut: verdict.reason! })

    if (verdict.valid && Date.now() - lastAvailabilityCheck > RATE_LIMIT_MS) {
      setIsCheckingAvailability(true)
      setLastAvailabilityCheck(Date.now())
      setTimeout(() => setIsCheckingAvailability(false), 800) // mock API
    }
  }, [checkIn, checkOut])

  /* ------------------------------------------------------------------ */
  //  Pricing helpers (unchanged)
  /* ------------------------------------------------------------------ */
  const basePrice = 110.5
  const cleaningFee = 25
  const petFee = hasPet ? 20 : 0
  const serviceFee = 15

  const nights = (() => {
    if (!checkIn || !checkOut) return 1
    const diff =
      (new Date(checkOut).getTime() - new Date(checkIn).getTime()) /
      86_400_000
    return diff > 0 ? diff : 1
  })()

  const discountedNight = nights >= 7 ? basePrice * 0.9 : nights >= 3 ? basePrice * 0.95 : basePrice
  const subtotal = discountedNight * nights
  const total = subtotal + cleaningFee + serviceFee + petFee

  /* ------------------------------------------------------------------ */
  return (
    <div className="min-h-screen bg-gray-50">
      {/* —————————————————————————  Booking Section (excerpt)  ————————————————————————— */}
      <section id="booking-section" className="py-16 px-4 max-w-4xl mx-auto">
        <Card>
          <CardContent className="p-8 space-y-8">
            <h2 className="text-xl font-semibold text-gray-900 flex items-center">
              <Clock className="w-5 h-5 mr-2 text-blue-600" /> Select your dates
              {isCheckingAvailability && <Clock className="w-4 h-4 ml-2 animate-spin text-blue-600" />}
            </h2>

            {/* ←————   Hardened calendar   ————→ */}
            <AdvancedCalendar
              bookedCheckIns={bookedCheckInDates}
              onValidRangeSelect={handleValidRangeSelect}
            />

            {/* Summary */}
            <div className="bg-blue-50 rounded-xl p-4 space-y-2 text-sm">
              <div className="flex justify-between">
                <span>Check‑in</span>
                <span>{checkIn || "—"}</span>
              </div>
              <div className="flex justify-between">
                <span>Check‑out</span>
                <span>{checkOut || "—"}</span>
              </div>
              {validationErrors.checkOut && (
                <p className="text-red-600 flex items-center mt-2">
                  <AlertCircle className="w-4 h-4 mr-1" />
                  {validationErrors.checkOut}
                </p>
              )}
            </div>

            {/* Price */}
            <div className="bg-white rounded-xl p-4 shadow-sm space-y-1">
              <div className="flex justify-between">
                <span>€{discountedNight.toFixed(2)} × {nights} night{nights !== 1 && "s"}</span>
                <span>€{subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm text-gray-600">
                <span>Cleaning</span>
                <span>€{cleaningFee.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm text-gray-600">
                <span>Service</span>
                <span>€{serviceFee.toFixed(2)}</span>
              </div>
              {hasPet && (
                <div className="flex justify-between text-sm text-gray-600">
                  <span>Pet fee</span>
                  <span>€{petFee.toFixed(2)}</span>
                </div>
              )}
              <hr />
              <div className="flex justify-between font-semibold">
                <span>Total</span>
                <span>€{total.toFixed(2)}</span>
              </div>
            </div>

            <Button
              disabled={Object.keys(validationErrors).length > 0 || !checkIn || !checkOut}
              className="w-full"
              asChild
            >
              <a href="/api/login" className="flex items-center justify-center">
                <Lock className="w-4 h-4 mr-2" /> Reserve securely
              </a>
            </Button>
          </CardContent>
        </Card>
      </section>

      {/* ————————————————————— Rest of the page (hero, amenities, footer…) ————————————————————— */}
      {/* Keep your existing markup here – unchanged. */}

      {/* Quick‑chat widget (unchanged) */}
    </div>
  )
}
