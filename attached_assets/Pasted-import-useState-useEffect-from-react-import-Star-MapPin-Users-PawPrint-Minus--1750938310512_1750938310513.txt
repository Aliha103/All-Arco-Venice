import { useState, useEffect } from "react"
import {
  Star,
  MapPin,
  Users,
  PawPrint,
  Minus,
  Plus,
  CheckCircle,
  Lock,
  AlertCircle,
  Clock,
  LogIn,
  UserPlus,
  Shield,
  MessageCircle,
  Building,
  Building2,
  Utensils,
  Bed,
  Wifi,
  Sparkles,
} from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  Calendar as AdvancedCalendar,
  validateStayRange,
  type DateRange,
} from "@/components/advanced-calendar"
import { format } from "date-fns"

/**
 * Landing page – full UI with hero images & guest reviews, wired to AdvancedCalendar.
 */
export default function Landing() {
  /* ------------------------------------------------------------------ */
  //  Booking state
  /* ------------------------------------------------------------------ */
  const [checkIn, setCheckIn] = useState("")
  const [checkOut, setCheckOut] = useState("")
  const [guests, setGuests] = useState(2)
  const [hasPet, setHasPet] = useState(false)
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({})
  const [isCheckingAvailability, setIsCheckingAvailability] = useState(false)
  const [lastAvailabilityCheck, setLastAvailabilityCheck] = useState(0)

  /* ------------------------------------------------------------------ */
  //  Mock bookings → arrival dates only (check‑out allowed)
  /* ------------------------------------------------------------------ */
  const existingBookings = [
    { checkIn: "2025-06-15" },
    { checkIn: "2025-06-22" },
    { checkIn: "2025-07-01" },
    { checkIn: "2025-07-10" },
    { checkIn: "2025-07-20" },
  ]
  const bookedCheckInDates = existingBookings.map((b) => new Date(b.checkIn))

  /* ------------------------------------------------------------------ */
  //  Calendar → form wiring
  /* ------------------------------------------------------------------ */
  const handleValidRangeSelect = (range: DateRange) => {
    if (range.from) setCheckIn(format(range.from, "yyyy-MM-dd"))
    if (range.to) setCheckOut(format(range.to, "yyyy-MM-dd"))
  }

  /* ------------------------------------------------------------------ */
  //  Real‑time availability + client‑side limits (≤30 nights)
  /* ------------------------------------------------------------------ */
  const RATE_LIMIT_MS = 2000
  const validateBooking = () => {
    if (!checkIn || !checkOut) return { valid: false, reason: "Select dates" }
    return validateStayRange(
      { from: new Date(checkIn), to: new Date(checkOut) },
      bookedCheckInDates,
      { maxStayDays: 30 }
    )
  }

  useEffect(() => {
    const verdict = validateBooking()
    setValidationErrors(verdict.valid ? {} : { checkOut: verdict.reason! })

    if (verdict.valid && Date.now() - lastAvailabilityCheck > RATE_LIMIT_MS) {
      setIsCheckingAvailability(true)
      setLastAvailabilityCheck(Date.now())
      setTimeout(() => setIsCheckingAvailability(false), 800) // mock API
    }
  }, [checkIn, checkOut])

  /* ------------------------------------------------------------------ */
  //  Pricing helpers
  /* ------------------------------------------------------------------ */
  const basePrice = 110.5
  const cleaningFee = 25
  const petFee = hasPet ? 20 : 0
  const serviceFee = 15

  const nights = (() => {
    if (!checkIn || !checkOut) return 1
    const diff =
      (new Date(checkOut).getTime() - new Date(checkIn).getTime()) /
      86_400_000
    return diff > 0 ? diff : 1
  })()

  const discountedNight = nights >= 7 ? basePrice * 0.9 : nights >= 3 ? basePrice * 0.95 : basePrice
  const subtotal = discountedNight * nights
  const total = subtotal + cleaningFee + serviceFee + petFee

  /* ------------------------------------------------------------------ */
  return (
    <div className="min-h-screen bg-gray-50">
      {/* —————————————————————————  Hero  ————————————————————————— */}
      <section className="bg-white px-4 py-8 sm:py-12">
        <div className="max-w-7xl mx-auto">
          <div className="mb-6">
            <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-3">
              All'Arco Apartment – Heart of Venice
            </h1>
            <div className="flex items-center space-x-4 text-sm text-gray-600">
              <div className="flex items-center space-x-1">
                <Star className="w-4 h-4 text-yellow-400 fill-current" />
                <span className="font-medium">4.89</span>
                <span>·</span>
                <span>127 reviews</span>
              </div>
              <div className="flex items-center space-x-1">
                <MapPin className="w-4 h-4" />
                <span>Venice, Italy</span>
              </div>
            </div>
          </div>

          {/*           Hero images grid (placeholders)            */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-2 h-64 sm:h-80 lg:h-96 rounded-xl overflow-hidden">
            <div className="bg-gray-200 flex items-center justify-center rounded-l-xl lg:rounded-none">
              <span className="text-gray-500">Main bedroom img</span>
            </div>
            <div className="grid grid-cols-2 gap-2">
              <div className="bg-blue-100 flex items-center justify-center rounded-tr-xl">
                <span className="text-blue-600 text-sm">Terrace view</span>
              </div>
              <div className="bg-green-100 flex items-center justify-center">
                <Utensils className="w-6 h-6 text-green-600" />
              </div>
              <div className="bg-purple-100 flex items-center justify-center rounded-bl-xl lg:rounded-none">
                <span className="text-purple-600 text-sm">Living room</span>
              </div>
              <div className="relative bg-gray-100 flex items-center justify-center rounded-br-xl">
                <span className="text-gray-500 text-sm">+3 photos</span>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* —————————————————————————  Booking Section  ————————————————————————— */}
      <section id="booking-section" className="py-16 px-4 max-w-4xl mx-auto">
        <Card>
          <CardContent className="p-8 space-y-8">
            <h2 className="text-xl font-semibold text-gray-900 flex items-center">
              <Clock className="w-5 h-5 mr-2 text-blue-600" /> Select your dates
              {isCheckingAvailability && <Clock className="w-4 h-4 ml-2 animate-spin text-blue-600" />}
            </h2>

            <AdvancedCalendar bookedCheckIns={bookedCheckInDates} onValidRangeSelect={handleValidRangeSelect} />

            <div className="bg-blue-50 rounded-xl p-4 space-y-2 text-sm">
              <div className="flex justify-between"><span>Check‑in</span><span>{checkIn || "—"}</span></div>
              <div className="flex justify-between"><span>Check‑out</span><span>{checkOut || "—"}</span></div>
              {validationErrors.checkOut && <p className="text-red-600 flex items-center"><AlertCircle className="w-4 h-4 mr-1" />{validationErrors.checkOut}</p>}
            </div>

            <div className="bg-white rounded-xl p-4 shadow-sm space-y-1">
              <div className="flex justify-between"><span>€{discountedNight.toFixed(2)} × {nights} night{nights !== 1 && "s"}</span><span>€{subtotal.toFixed(2)}</span></div>
              <div className="flex justify-between text-sm text-gray-600"><span>Cleaning</span><span>€{cleaningFee.toFixed(2)}</span></div>
              <div className="flex justify-between text-sm text-gray-600"><span>Service</span><span>€{serviceFee.toFixed(2)}</span></div>
              {hasPet && <div className="flex justify-between text-sm text-gray-600"><span>Pet fee</span><span>€{petFee.toFixed(2)}</span></div>}
              <hr />
              <div className="flex justify-between font-semibold"><span>Total</span><span>€{total.toFixed(2)}</span></div>
            </div>

            <Button disabled={Object.keys(validationErrors).length>0||!checkIn||!checkOut} className="w-full" asChild>
              <a href="/api/login" className="flex items-center justify-center"><Lock className="w-4 h-4 mr-2" />Reserve securely</a>
            </Button>
          </CardContent>
        </Card>
      </section>

      {/* —————————————————————————  Guest Reviews  ————————————————————————— */}
      <section className="py-16 sm:py-20 px-4 bg-gray-50">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12">
            <div className="inline-flex items-center bg-yellow-100 text-yellow-700 px-4 py-2 rounded-full mb-6">
              <Star className="w-5 h-5 mr-2" /> <span className="font-semibold">Guest Reviews</span>
            </div>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">What our guests say about their Venice experience</p>
          </div>

          {/* Overall rating */}
          <div className="bg-white rounded-2xl p-8 mb-12 shadow-lg border border-gray-200">
            <div className="flex items-center mb-8"><Star className="w-6 h-6 text-yellow-500 mr-3 fill-current" /><h3 className="text-xl font-bold text-gray-900">Overall Rating</h3></div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-8 text-center">
              {[
                { icon: <Sparkles className="w-8 h-8 text-yellow-600" />, label: "Cleanliness", score: 4.9 },
                { icon: <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white">€</div>, label: "Price Value", score: 4.8 },
                { icon: <Wifi className="w-8 h-8 text-blue-600" />, label: "WiFi Quality", score: 4.9 },
                { icon: <Clock className="w-8 h-8 text-purple-600" />, label: "Response Time", score: 4.7 },
              ].map(({ icon, label, score }) => (
                <div key={label}>
                  <div className="w-16 h-16 bg-gray-50 rounded-full flex items-center justify-center mx-auto mb-3">{icon}</div>
                  <h4 className="font-semibold text-gray-900 mb-1">{label}</h4>
                  <div className="flex justify-center mb-1">
                    {[1,2,3,4,5].map(n=> <Star key={n} className={`w-4 h-4 ${n<=4?"text-yellow-400 fill-current":"text-gray-300"}`} />)}
                  </div>
                  <span className="text-lg font-bold text-gray-900">{score}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Recent reviews */}
          <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-200">
            <div className="flex items-center mb-8"><Users className="w-5 h-5 text-blue-600 mr-3" /><h3 className="text-xl font-bold text-gray-900">Recent Reviews</h3></div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {[
                { name:"Sarah M.", location:"London, UK", when:"December 2024", text:"Absolutely magical! The apartment exceeded all expectations." },
                { name:"James R.", location:"New York, USA", when:"November 2024", text:"Outstanding Venice experience! Beautifully restored with charm." },
                { name:"Emma L.", location:"Sydney, Australia", when:"October 2024", text:"Perfect romantic getaway! Amazing canal views." },
                { name:"David K.", location:"Toronto, Canada", when:"September 2024", text:"Exceptional stay in Venice! Prime location." },
              ].map(({name,location,when,text})=> (
                <div key={name} className="bg-gray-50 rounded-xl p-6 border border-gray-100">
                  <div className="flex items-start justify-between mb-4">
                    <div><h4 className="font-semibold text-gray-900">{name}</h4><p className="text-sm text-gray-600">{location}</p></div>
                    <div className="flex items-center space-x-1">
                      {[1,2,3,4,5].map(n=> <Star key={n} className="w-4 h-4 text-yellow-400 fill-current" />)}
                      <span className="text-xs text-gray-500 ml-2">{when}</span>
                    </div>
                  </div>
                  <p className="text-gray-700 leading-relaxed">"{text}"</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* —————————————————————————  Chat widget (unchanged) ————————————————————————— */}
      <ChatWidget />
    </div>
  )
}

/* ------------------------------------------------------------------ */
//  Quick‑chat floating widget (kept minimal)
/* ------------------------------------------------------------------ */
function ChatWidget() {
  const [open,setOpen]=useState(false)
  const [name,setName]=useState("")
  const [email,setEmail]=useState("")
  return (
    <>
      {!open && (
        <button onClick={()=>setOpen(true)} className="fixed bottom-6 right-6 w-16 h-16 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg flex items-center justify-center z-50">
          <MessageCircle className="w-6 h-6" />
        </button>
      )}
      {open && (
        <div className="fixed bottom-6 right-6 w-80 bg-white rounded-lg shadow-xl z-50 overflow-hidden">
          <div className="bg-blue-600 text-white p-4 flex items-center justify-between"><h3 className="font-semibold">All'Arco</h3><button onClick={()=>setOpen(false)}><Lock className="w-4 h-4" /></button></div>
          <div className="p-4 text-gray-700 text-sm">👋 How can we help you?</div>
          <div className="p-4 space-y-3 border-t">
            <input value={name} onChange={e=>setName(e.target.value)} placeholder="Name" className="w-full p-2 border rounded" />
            <input value={email} onChange={e=>setEmail(e.target.value)} placeholder="Email" className="w-full p-2 border rounded" />
            <Button onClick={()=>setOpen(false)} className="w-full">Start chat</Button>
          </div>
        </div>
      )}
    </>
  )
}
